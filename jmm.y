/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include "Absyn.H"
#include <algorithm>
typedef struct yy_buffer_state *YY_BUFFER_STATE;
int yyparse(void);
int yylex(void);
YY_BUFFER_STATE yy_scan_string(const char *str);
void yy_delete_buffer(YY_BUFFER_STATE buf);
int yy_mylinenumber;
int initialize_lexer(FILE * inp);
int yywrap(void)
{
  return 1;
}
void yyerror(const char *str)
{
  std::cout << "line " << yy_mylinenumber << std::endl ;
  fprintf(stderr,"error: %s\n",str);
}



static Program* YY_RESULT_Program_ = 0;
Program* pProgram(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}
Program* pProgram(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}

static GlobalDec* YY_RESULT_GlobalDec_ = 0;
GlobalDec* pGlobalDec(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_GlobalDec_;
  }
}
GlobalDec* pGlobalDec(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_GlobalDec_;
  }
}

static ListStatement* YY_RESULT_ListStatement_ = 0;
ListStatement* pListStatement(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStatement_;
  }
}
ListStatement* pListStatement(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStatement_;
  }
}

static ListGlobalDec* YY_RESULT_ListGlobalDec_ = 0;
ListGlobalDec* pListGlobalDec(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListGlobalDec_;
  }
}
ListGlobalDec* pListGlobalDec(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListGlobalDec_;
  }
}

static ListFormalParam* YY_RESULT_ListFormalParam_ = 0;
ListFormalParam* pListFormalParam(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFormalParam_;
  }
}
ListFormalParam* pListFormalParam(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFormalParam_;
  }
}

static ListExpression* YY_RESULT_ListExpression_ = 0;
ListExpression* pListExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExpression_;
  }
}
ListExpression* pListExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExpression_;
  }
}

static Literal* YY_RESULT_Literal_ = 0;
Literal* pLiteral(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Literal_;
  }
}
Literal* pLiteral(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Literal_;
  }
}

static Type* YY_RESULT_Type_ = 0;
Type* pType(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}
Type* pType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}

static Identifier* YY_RESULT_Identifier_ = 0;
Identifier* pIdentifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Identifier_;
  }
}
Identifier* pIdentifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Identifier_;
  }
}

static FormalParam* YY_RESULT_FormalParam_ = 0;
FormalParam* pFormalParam(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FormalParam_;
  }
}
FormalParam* pFormalParam(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FormalParam_;
  }
}

static Block* YY_RESULT_Block_ = 0;
Block* pBlock(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Block_;
  }
}
Block* pBlock(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Block_;
  }
}

static Statement* YY_RESULT_Statement_ = 0;
Statement* pStatement(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Statement_;
  }
}
Statement* pStatement(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Statement_;
  }
}

static FunctionInvocation* YY_RESULT_FunctionInvocation_ = 0;
FunctionInvocation* pFunctionInvocation(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FunctionInvocation_;
  }
}
FunctionInvocation* pFunctionInvocation(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FunctionInvocation_;
  }
}

static Primary* YY_RESULT_Primary_ = 0;
Primary* pPrimary(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Primary_;
  }
}
Primary* pPrimary(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Primary_;
  }
}

static PostFixExpression* YY_RESULT_PostFixExpression_ = 0;
PostFixExpression* pPostFixExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PostFixExpression_;
  }
}
PostFixExpression* pPostFixExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PostFixExpression_;
  }
}

static UnaryExpression* YY_RESULT_UnaryExpression_ = 0;
UnaryExpression* pUnaryExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_UnaryExpression_;
  }
}
UnaryExpression* pUnaryExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_UnaryExpression_;
  }
}

static MultiplicativeExpression* YY_RESULT_MultiplicativeExpression_ = 0;
MultiplicativeExpression* pMultiplicativeExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_MultiplicativeExpression_;
  }
}
MultiplicativeExpression* pMultiplicativeExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_MultiplicativeExpression_;
  }
}

static AdditiveExpression* YY_RESULT_AdditiveExpression_ = 0;
AdditiveExpression* pAdditiveExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_AdditiveExpression_;
  }
}
AdditiveExpression* pAdditiveExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_AdditiveExpression_;
  }
}

static RelationalExpression* YY_RESULT_RelationalExpression_ = 0;
RelationalExpression* pRelationalExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RelationalExpression_;
  }
}
RelationalExpression* pRelationalExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RelationalExpression_;
  }
}

static EqualityExpression* YY_RESULT_EqualityExpression_ = 0;
EqualityExpression* pEqualityExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_EqualityExpression_;
  }
}
EqualityExpression* pEqualityExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_EqualityExpression_;
  }
}

static ConditionalAndExpression* YY_RESULT_ConditionalAndExpression_ = 0;
ConditionalAndExpression* pConditionalAndExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ConditionalAndExpression_;
  }
}
ConditionalAndExpression* pConditionalAndExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ConditionalAndExpression_;
  }
}

static ConditionalOrExpression* YY_RESULT_ConditionalOrExpression_ = 0;
ConditionalOrExpression* pConditionalOrExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ConditionalOrExpression_;
  }
}
ConditionalOrExpression* pConditionalOrExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ConditionalOrExpression_;
  }
}

static AssignmentExpression* YY_RESULT_AssignmentExpression_ = 0;
AssignmentExpression* pAssignmentExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_AssignmentExpression_;
  }
}
AssignmentExpression* pAssignmentExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_AssignmentExpression_;
  }
}

static Assignment* YY_RESULT_Assignment_ = 0;
Assignment* pAssignment(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Assignment_;
  }
}
Assignment* pAssignment(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Assignment_;
  }
}

static Expression* YY_RESULT_Expression_ = 0;
Expression* pExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expression_;
  }
}
Expression* pExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expression_;
  }
}

static PIdentifier* YY_RESULT_PIdentifier_ = 0;
PIdentifier* pPIdentifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PIdentifier_;
  }
}
PIdentifier* pPIdentifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PIdentifier_;
  }
}



%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  PIdentifier* pidentifier_;
  Program* program_;
  GlobalDec* globaldec_;
  ListStatement* liststatement_;
  ListGlobalDec* listglobaldec_;
  ListFormalParam* listformalparam_;
  ListExpression* listexpression_;
  Literal* literal_;
  Type* type_;
  Identifier* identifier_;
  FormalParam* formalparam_;
  Block* block_;
  Statement* statement_;
  FunctionInvocation* functioninvocation_;
  Primary* primary_;
  PostFixExpression* postfixexpression_;
  UnaryExpression* unaryexpression_;
  MultiplicativeExpression* multiplicativeexpression_;
  AdditiveExpression* additiveexpression_;
  RelationalExpression* relationalexpression_;
  EqualityExpression* equalityexpression_;
  ConditionalAndExpression* conditionalandexpression_;
  ConditionalOrExpression* conditionalorexpression_;
  AssignmentExpression* assignmentexpression_;
  Assignment* assignment_;
  Expression* expression_;

}


%token _ERROR_
%token _SYMB_0    //   (
%token _SYMB_1    //   )
%token _SYMB_2    //   {
%token _SYMB_3    //   }
%token _SYMB_4    //   ;
%token _SYMB_5    //   ,
%token _SYMB_6    //   -
%token _SYMB_7    //   !
%token _SYMB_8    //   *
%token _SYMB_9    //   /
%token _SYMB_10    //   %
%token _SYMB_11    //   +
%token _SYMB_12    //   <
%token _SYMB_13    //   >
%token _SYMB_14    //   <=
%token _SYMB_15    //   >=
%token _SYMB_16    //   ==
%token _SYMB_17    //   !=
%token _SYMB_18    //   &&
%token _SYMB_19    //   ||
%token _SYMB_20    //   =
%token _SYMB_21    //   boolean
%token _SYMB_22    //   break
%token _SYMB_23    //   else
%token _SYMB_24    //   false
%token _SYMB_25    //   if
%token _SYMB_26    //   int
%token _SYMB_27    //   return
%token _SYMB_28    //   true
%token _SYMB_29    //   void
%token _SYMB_30    //   while
%token<string_> _SYMB_31    //   PIdentifier

%type <pidentifier_> PIdentifier
%type <program_> Program
%type <globaldec_> GlobalDec
%type <liststatement_> ListStatement
%type <listglobaldec_> ListGlobalDec
%type <listformalparam_> ListFormalParam
%type <listexpression_> ListExpression
%type <literal_> Literal
%type <type_> Type
%type <identifier_> Identifier
%type <formalparam_> FormalParam
%type <block_> Block
%type <statement_> Statement
%type <statement_> Statement1
%type <functioninvocation_> FunctionInvocation
%type <primary_> Primary
%type <postfixexpression_> PostFixExpression
%type <unaryexpression_> UnaryExpression
%type <multiplicativeexpression_> MultiplicativeExpression
%type <additiveexpression_> AdditiveExpression
%type <relationalexpression_> RelationalExpression
%type <equalityexpression_> EqualityExpression
%type <conditionalandexpression_> ConditionalAndExpression
%type <conditionalorexpression_> ConditionalOrExpression
%type <assignmentexpression_> AssignmentExpression
%type <assignment_> Assignment
%type <expression_> Expression

%token<string_> _STRING_
%token<int_> _INTEGER_

%%
Program : ListGlobalDec {  $$ = new Prog($1); YY_RESULT_Program_= $$; } 
;
GlobalDec : Type Identifier _SYMB_0 ListFormalParam _SYMB_1 Block {  std::reverse($4->begin(),$4->end()) ;$$ = new GFuncDec($1, $2, $4, $6); YY_RESULT_GlobalDec_= $$; } 
  | _SYMB_29 Identifier _SYMB_0 ListFormalParam _SYMB_1 Block {  std::reverse($4->begin(),$4->end()) ;$$ = new GVFuncDec($2, $4, $6); YY_RESULT_GlobalDec_= $$; }
  | Identifier _SYMB_0 _SYMB_1 _SYMB_2 ListStatement _SYMB_3 {  $$ = new GMainFuncDec($1, $5); YY_RESULT_GlobalDec_= $$; }
  | Type Identifier _SYMB_4 {  $$ = new GVarDec($1, $2); YY_RESULT_GlobalDec_= $$; }
;
ListStatement : /* empty */ {  $$ = new ListStatement(); YY_RESULT_ListStatement_= $$; } 
  | ListStatement Statement {  $1->push_back($2) ; $$ = $1 ; YY_RESULT_ListStatement_= $$; }
;
ListGlobalDec : /* empty */ {  $$ = new ListGlobalDec(); YY_RESULT_ListGlobalDec_= $$; } 
  | ListGlobalDec GlobalDec {  $1->push_back($2) ; $$ = $1 ; YY_RESULT_ListGlobalDec_= $$; }
;
ListFormalParam : /* empty */ {  $$ = new ListFormalParam(); YY_RESULT_ListFormalParam_= $$; } 
  | FormalParam {  $$ = new ListFormalParam() ; $$->push_back($1); YY_RESULT_ListFormalParam_= $$; }
  | FormalParam _SYMB_5 ListFormalParam {  $3->push_back($1) ; $$ = $3 ; YY_RESULT_ListFormalParam_= $$; }
;
ListExpression : /* empty */ {  $$ = new ListExpression(); YY_RESULT_ListExpression_= $$; } 
  | Expression {  $$ = new ListExpression() ; $$->push_back($1); YY_RESULT_ListExpression_= $$; }
  | Expression _SYMB_5 ListExpression {  $3->push_back($1) ; $$ = $3 ; YY_RESULT_ListExpression_= $$; }
;
Literal : _INTEGER_ {  $$ = new EInt($1); YY_RESULT_Literal_= $$; } 
  | _STRING_ {  $$ = new EString($1); YY_RESULT_Literal_= $$; }
  | _SYMB_24 {  $$ = new ETrue(); YY_RESULT_Literal_= $$; }
  | _SYMB_28 {  $$ = new EFalse(); YY_RESULT_Literal_= $$; }
;
Type : _SYMB_21 {  $$ = new TBool(); YY_RESULT_Type_= $$; } 
  | _SYMB_26 {  $$ = new TInt(); YY_RESULT_Type_= $$; }
;
Identifier : PIdentifier {  $$ = new EId($1); YY_RESULT_Identifier_= $$; } 
;
FormalParam : Type Identifier {  $$ = new FParam($1, $2); YY_RESULT_FormalParam_= $$; } 
;
Block : _SYMB_2 ListStatement _SYMB_3 {  $$ = new BBlock($2); YY_RESULT_Block_= $$; } 
;
Statement : Type Identifier _SYMB_4 {  $$ = new SVarDec($1, $2); YY_RESULT_Statement_= $$; } 
  | _SYMB_4 {  $$ = new SEmpty(); YY_RESULT_Statement_= $$; }
  | Assignment _SYMB_4 {  $$ = new SAssign($1); YY_RESULT_Statement_= $$; }
  | FunctionInvocation _SYMB_4 {  $$ = new SCall($1); YY_RESULT_Statement_= $$; }
  | _SYMB_22 _SYMB_4 {  $$ = new SBreak(); YY_RESULT_Statement_= $$; }
  | _SYMB_27 _SYMB_4 {  $$ = new SRet(); YY_RESULT_Statement_= $$; }
  | _SYMB_25 _SYMB_0 Expression _SYMB_1 Statement {  $$ = new SIf($3, $5); YY_RESULT_Statement_= $$; }
  | _SYMB_30 _SYMB_0 Expression _SYMB_1 Statement {  $$ = new SWhile($3, $5); YY_RESULT_Statement_= $$; }
  | Statement1 {  $$ = $1; YY_RESULT_Statement_= $$; }
;
Statement1 : Block {  $$ = new SBlock($1); YY_RESULT_Statement_= $$; } 
  | _SYMB_27 Expression _SYMB_4 {  $$ = new SRetExpr($2); YY_RESULT_Statement_= $$; }
  | _SYMB_25 _SYMB_0 Expression _SYMB_1 Statement _SYMB_23 Statement {  $$ = new SIfElse($3, $5, $7); YY_RESULT_Statement_= $$; }
;
FunctionInvocation : Identifier _SYMB_0 ListExpression _SYMB_1 {  std::reverse($3->begin(),$3->end()) ;$$ = new FCall($1, $3); YY_RESULT_FunctionInvocation_= $$; } 
;
Primary : Literal {  $$ = new PLiteral($1); YY_RESULT_Primary_= $$; } 
  | _SYMB_0 Expression _SYMB_1 {  $$ = new PExpr($2); YY_RESULT_Primary_= $$; }
  | FunctionInvocation {  $$ = new PFuncInv($1); YY_RESULT_Primary_= $$; }
;
PostFixExpression : Primary {  $$ = new PFExprPrim($1); YY_RESULT_PostFixExpression_= $$; } 
  | Identifier {  $$ = new PFExprID($1); YY_RESULT_PostFixExpression_= $$; }
;
UnaryExpression : PostFixExpression {  $$ = new UnExpr($1); YY_RESULT_UnaryExpression_= $$; } 
  | _SYMB_6 UnaryExpression {  $$ = new UnExprMin($2); YY_RESULT_UnaryExpression_= $$; }
  | _SYMB_7 UnaryExpression {  $$ = new UnExprNeg($2); YY_RESULT_UnaryExpression_= $$; }
;
MultiplicativeExpression : UnaryExpression {  $$ = new MulExpr($1); YY_RESULT_MultiplicativeExpression_= $$; } 
  | MultiplicativeExpression _SYMB_8 UnaryExpression {  $$ = new MulExprMul($1, $3); YY_RESULT_MultiplicativeExpression_= $$; }
  | MultiplicativeExpression _SYMB_9 UnaryExpression {  $$ = new MulExprDiv($1, $3); YY_RESULT_MultiplicativeExpression_= $$; }
  | MultiplicativeExpression _SYMB_10 UnaryExpression {  $$ = new MulExprMod($1, $3); YY_RESULT_MultiplicativeExpression_= $$; }
;
AdditiveExpression : MultiplicativeExpression {  $$ = new AddExpr($1); YY_RESULT_AdditiveExpression_= $$; } 
  | AdditiveExpression _SYMB_11 MultiplicativeExpression {  $$ = new AddExprAdd($1, $3); YY_RESULT_AdditiveExpression_= $$; }
  | AdditiveExpression _SYMB_6 MultiplicativeExpression {  $$ = new AddExprSub($1, $3); YY_RESULT_AdditiveExpression_= $$; }
;
RelationalExpression : AdditiveExpression {  $$ = new RelExpr($1); YY_RESULT_RelationalExpression_= $$; } 
  | RelationalExpression _SYMB_12 AdditiveExpression {  $$ = new RelExprLT($1, $3); YY_RESULT_RelationalExpression_= $$; }
  | RelationalExpression _SYMB_13 AdditiveExpression {  $$ = new RelExprGT($1, $3); YY_RESULT_RelationalExpression_= $$; }
  | RelationalExpression _SYMB_14 AdditiveExpression {  $$ = new RelExprLE($1, $3); YY_RESULT_RelationalExpression_= $$; }
  | RelationalExpression _SYMB_15 AdditiveExpression {  $$ = new RelExprGE($1, $3); YY_RESULT_RelationalExpression_= $$; }
;
EqualityExpression : RelationalExpression {  $$ = new EqExpr($1); YY_RESULT_EqualityExpression_= $$; } 
  | EqualityExpression _SYMB_16 RelationalExpression {  $$ = new EqExprEQ($1, $3); YY_RESULT_EqualityExpression_= $$; }
  | EqualityExpression _SYMB_17 RelationalExpression {  $$ = new EqExprNE($1, $3); YY_RESULT_EqualityExpression_= $$; }
;
ConditionalAndExpression : EqualityExpression {  $$ = new CAExpr($1); YY_RESULT_ConditionalAndExpression_= $$; } 
  | ConditionalAndExpression _SYMB_18 EqualityExpression {  $$ = new CAExprAnd($1, $3); YY_RESULT_ConditionalAndExpression_= $$; }
;
ConditionalOrExpression : ConditionalAndExpression {  $$ = new COExpr($1); YY_RESULT_ConditionalOrExpression_= $$; } 
  | ConditionalOrExpression _SYMB_19 ConditionalAndExpression {  $$ = new COExprOr($1, $3); YY_RESULT_ConditionalOrExpression_= $$; }
;
AssignmentExpression : ConditionalOrExpression {  $$ = new AssExpr($1); YY_RESULT_AssignmentExpression_= $$; } 
  | Assignment {  $$ = new AssExprAss($1); YY_RESULT_AssignmentExpression_= $$; }
;
Assignment : Identifier _SYMB_20 AssignmentExpression {  $$ = new Assign($1, $3); YY_RESULT_Assignment_= $$; } 
;
Expression : AssignmentExpression {  $$ = new Expr($1); YY_RESULT_Expression_= $$; } 
;
PIdentifier : _SYMB_31 {  $$ = new PIdentifier($1,yy_mylinenumber) ; YY_RESULT_PIdentifier_= $$ ; } 
;

